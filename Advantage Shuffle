//link: https://leetcode.com/problems/advantage-shuffle/


class Solution {
public:
    vector<int> advantageCount(vector<int>& a, vector<int>& b) {
        vector<int>c(a.begin(),a.end());
        vector<pair<int, int>>d;
        sort(c.begin(), c.end());
        
        for(int i=0; i<b.size(); i++){
            d.push_back({b[i], i});
        }
        vector<int>ans;
        for(int i=0; i<a.size(); i++){
            ans.push_back(-1);
        }
        sort(d.begin(), d.end());
        int i=c.size()-1, j=d.size()-1;
        while(i>=0 && j>=0){
            if(c[i]>d[j].first){
                ans[d[j].second]=c[i];
                c[i]=-1;
                i--, j--;
            }
            else{
                j--;
            }
        }
        vector<int>rem;
        for(auto i: c){
            if(i>=0){
                rem.push_back(i);
            }
        }
        for(auto i: rem){
            cout<<i<<" ";
        }
        cout<<endl;
        int k=0;
        for(int i=0; i<ans.size(); i++){
            if(ans[i]<0){
                ans[i]=rem[k++];
            }
        }
        
        return ans;
        
    }
};
