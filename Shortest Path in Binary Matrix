//Problem link: https://leetcode.com/problems/shortest-path-in-binary-matrix/


class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        if(grid[0][0]==1){
            return -1;
        }
        
        int m=grid.size();
        int n=grid[0].size();
        queue<pair<int, int>>index;
        bool vis[m][n];
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                vis[i][j]=0;
            }
        }

        
        grid[0][0]=1;
        vis[0][0]=1;
        index.push({0,0});
        while(index.empty()==false){
            int i=index.front().first;
            int j=index.front().second;
            index.pop();
            
            //down
            if(i+1<m){
                if(grid[i+1][j]==0 && vis[i+1][j]==0){
                    vis[i+1][j]=1;
                    grid[i+1][j]=grid[i][j]+1;
                    index.push({i+1,j});
                }    
            }
            //right
            if(j+1<n){
                if(grid[i][j+1]==0 && vis[i][j+1]==0){
                    vis[i][j+1]=1;
                    grid[i][j+1]=grid[i][j]+1;
                    index.push({i, j+1});
                }
            }
            //up
            if(i-1>=0){
                if(grid[i-1][j]==0 && vis[i-1][j]==0){
                    vis[i-1][j]=1;
                    grid[i-1][j]=grid[i][j]+1;
                    index.push({i-1, j});
                }
            }
            //left
            if(j-1>=0){
                if(grid[i][j-1]==0 && vis[i][j-1]==0){
                    vis[i][j-1]=1;
                    grid[i][j-1]=grid[i][j]+1;
                    index.push({i, j-1});
                }
            }
            //bottom-right 
            if(i+1<m && j+1<n){
                if(grid[i+1][j+1]==0 && vis[i+1][j+1]==0){
                    vis[i+1][j+1]=1;
                    grid[i+1][j+1]=grid[i][j]+1;
                    index.push({i+1, j+1});
                }
            }
            //bottom-left
            
            if(i+1<m && j-1>=0){
                if(grid[i+1][j-1]==0 && vis[i+1][j-1]==0){
                    vis[i+1][j-1]=1;
                    grid[i+1][j-1]=grid[i][j]+1;
                    index.push({i+1, j-1});
                }
            }
            //top-right
            
            if(i-1>=0 && j+1<n){
                if(grid[i-1][j+1]==0 && vis[i-1][j+1]==0){
                    vis[i-1][j+1]=1;
                    grid[i-1][j+1]=grid[i][j]+1;
                    index.push({i-1, j+1});
                }
            }
            //top-left
            
            if(i-1>=0 && j-1>=0){
                if(grid[i-1][j-1]==0 && vis[i-1][j-1]==0){
                    vis[i-1][j-1]=1;
                    grid[i-1][j-1]=grid[i][j]+1;
                    index.push({i-1, j-1});
                }
            }
        }
        if(vis[m-1][n-1]==0){
            return -1;
        }
        return grid[m-1][n-1];
    }
};
