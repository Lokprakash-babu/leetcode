//problem link: https://leetcode.com/problems/average-of-levels-in-binary-tree/


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<double> averageOfLevels(TreeNode* root) {
        map<int,pair<long long, int>>hash;
        queue<pair<TreeNode*, int>>q;
        q.push({root, 0});
        while(!q.empty()){
            TreeNode *curr=q.front().first;
            int value=q.front().second;
            hash[value].first+=(long long)curr->val;
            hash[value].second++;
            q.pop();
            if(curr->left){
                q.push({curr->left, value+1});
            }
            if(curr->right){
                q.push({curr->right, value+1});
            }
        }
        vector<double>ans;
        for(auto i: hash){
            ans.push_back((double)i.second.first/i.second.second);
            // cout<<"val "<<i.first<<" "<<i.second.first<<" "<<" "<<i.second.second<<endl;
        }
        return ans;
        
    }
};
